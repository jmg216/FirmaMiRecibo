/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.isa.main;

import com.isa.common.ActualCertInfo;
import com.isa.common.FrontCommon;
import com.isa.common.GsonHelper;
import com.isa.common.ICommon;
import com.isa.entities.Codigo;
import com.isa.entities.WrapperCert;
import com.isa.exception.AppletException;
import com.isa.firma.FirmaPDFController;
import com.isa.firma.PDFFirma;
import com.isa.plataform.KeyStoreValidator;
import com.isa.security.ISCertSecurityManager;
import com.isa.token.HandlerToken;
import com.isa.token.Token;
import com.isa.utiles.StreamDataSource;
import com.isa.utiles.Utiles;
import com.isa.utiles.UtilesMsg;
import com.isa.utiles.UtilesResources;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.UnrecoverableKeyException;
import java.security.cert.CertificateException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.security.auth.login.LoginException;
import netscape.javascript.JSObject;
import sun.security.pkcs11.wrapper.PKCS11Exception;

/**
 *
 * @author JMiraballes
 */
public class Main extends javax.swing.JApplet implements ICommon {

    /**
     * Initializes the applet Main
     */
    @Override
    public void init() {
        try{
            SecurityManager sm = new ISCertSecurityManager();
            System.setSecurityManager( sm ); 
            /* Set the Nimbus look and feel */
            //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
            initComponents();
            setFrontPanelSize();
            KeyStoreValidator.setInitStoreValidator();        
            UtilesResources.setRutaProperties(getParameter("ruta"));
            sincronizarTokens();
        }
        catch( AppletException ex ){
            ex.printStackTrace();
        }        
    }
    
    public void sincronizarTokens() throws AppletException {
        try{
            System.out.println("Main::sincronizarTokens");
            HandlerToken handler = new HandlerToken();
            ActualCertInfo.getInstance().setHandler(handler);
            System.out.println("Main::sincronizarTokens FIN");
        }
        catch( AppletException e ){
            //ingreso token inactivo
            Token token = new Token();
            HandlerToken handler = new HandlerToken( token );
            ActualCertInfo.getInstance().setHandler( handler );            
        }
        
    }     

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    public void setFrontPanelSize() {
        setSize(FrontCommon.SIZE_WIDTH, FrontCommon.SIZE_HEIGHT);
    }
    
    
    //******************************************************************************************
    //FUNCIONES JS *****************************************************************************
    //******************************************************************************************
    
    
    public boolean isSCardActivo(){
        System.out.println("Main::isSCardActivo");
        HandlerToken handler = ActualCertInfo.getInstance().getHandler();
        return (handler != null && handler.isTokenActivo());
    }
    
    public String authSCard( String password ){
        System.out.println("Main::authSCard");
 
        WrapperCert wcert = new WrapperCert();
        
        if (Utiles.isNullOrEmpty(password)){
            wcert.setCodigo(Codigo.ERROR);
            wcert.setMsj("El pin es obligatorio.");
            return GsonHelper.getInstance().getGson().toJson(wcert, WrapperCert.class);
        }
        
        try {
            HandlerToken handlerToken = ActualCertInfo.getInstance().getHandler();
            ActualCertInfo.getInstance().setPassword( password );
            
            Token token = handlerToken.getTokenActivo();
            token.login( password );
            wcert =  token.obtenerCertCI();
            ActualCertInfo.getInstance().setCedula(wcert.getCertificado().getCedula());
            ActualCertInfo.getInstance().setFirmante(wcert.getCertificado().getNombre());
            return GsonHelper.getInstance().getGson().toJson(wcert, WrapperCert.class);
            
        } 
        catch (IOException ex) {
            
            if (ex.getCause() instanceof LoginException){
                LoginException log = (LoginException) ex.getCause();
                PKCS11Exception pkcs = (PKCS11Exception) log.getCause();
                if ( Utiles.PKCS11_EXCEPTION_CKR_PIN_INCORRECT.equals(pkcs.getMessage())){
                    wcert.setCodigo(Codigo.ERROR);
                    wcert.setMsj(UtilesMsg.ERROR_PIN_INCORRECTO);
                }
                else if (Utiles.PKCS11_EXCEPTION_CKR_PIN_LEN_RANGE.equals(pkcs.getMessage())){
                    wcert.setCodigo(Codigo.ERROR);
                    wcert.setMsj(UtilesMsg.ERROR_PIN_INCORRECTO);
                }
                else if (Utiles.PKCS11_EXCEPTION_CKR_PIN_LOCKED.equals(pkcs.getMessage())){
                    wcert.setCodigo(Codigo.ERROR);
                    wcert.setMsj(UtilesMsg.ERROR_TOKEN_BLOQUEADO);
                }
                else if (Utiles.PKCS11_EXCEPTION_CKR_TOKEN_NOT_RECOGNIZED.equals(pkcs.getMessage())){
                    wcert.setCodigo(Codigo.ERROR);
                    wcert.setMsj(UtilesMsg.ERROR_TOKEN_SIN_IDENTIFICAR);                    
                }
                else{
                    wcert.setCodigo(Codigo.ERROR);
                    wcert.setMsj(UtilesMsg.ERROR_AUTH);                   
                }
            }
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        } 
        catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            wcert.setCodigo(Codigo.ERROR);
            wcert.setMsj(UtilesMsg.ERROR_AUTH);             
        } 
        catch (CertificateException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            wcert.setCodigo(Codigo.ERROR);
            wcert.setMsj(UtilesMsg.ERROR_AUTH);  
        }
         return GsonHelper.getInstance().getGson().toJson(wcert, WrapperCert.class);
    }
    
    public String firmarSCardDocumento( String nombre ){ 
        System.out.println("Metodo firmarPDF.");
        OutputStream os = null;
        try{

            InputStream inputStream = new FileInputStream( UtilesResources.getProperty("appletConfig.docNoFirmados") + nombre );
            FirmaPDFController firmapdfcontroller = FirmaPDFController.getInstance();
            PDFFirma infoFirma = firmapdfcontroller.generarApariencia();

            ByteArrayOutputStream pdfOS = firmapdfcontroller.firmar(infoFirma, inputStream);

            byte[] pdfFirmado = pdfOS.toByteArray();
            
            File filedelete = new File(UtilesResources.getProperty("appletConfig.docNoFirmados") + nombre);
            filedelete.delete();
            
            if (nombre.indexOf("-F.pdf") < 0){
                String nuevonombre = nombre.substring(0, nombre.length() - 4);
                nombre = (nuevonombre + "-F.pdf");
            }

            File file = new File( UtilesResources.getProperty("appletConfig.docNoFirmados") + nombre );
            os = new FileOutputStream(file);

            os.write( pdfFirmado );
            os.flush();
            os.close();
            
            HandlerToken handlerToken = ActualCertInfo.getInstance().getHandler();
            Token token = handlerToken.getTokenActivo();
            token.logout();
            return "true," + nombre;
        }
        catch (AppletException ex) {
            Logger.getLogger(FirmaPDFController.class.getName()).log(Level.SEVERE, null, ex);
            return "true";
        }
        catch (IOException ex) {
            Logger.getLogger(FirmaPDFController.class.getName()).log(Level.SEVERE, null, ex);
            return "true";
        } 
        catch (LoginException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            return "false";
        }
        finally {
            try {
                if (os != null) {
                    os.close();
                }
            } 
            catch (IOException e) {
                e.printStackTrace();
            }
        }        
    }   
    
    public void firmaError(String msg){
        JSObject win = (JSObject) JSObject.getWindow(this);
        win.call("firmaError", new String[]{  msg });        
    }
    
    
    public void firmaExitosa( String msj ){  
        JSObject win = (JSObject) JSObject.getWindow(this);
        win.call("firmaExitosa", new String[]{  msj } );  
    }  
    
    
    
}
